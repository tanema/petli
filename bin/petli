#!/usr/bin/env ruby
require_relative './bootstrap'
require 'optparse'

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: petli [options]"
  opts.on("-r", "--reset", "Reset button to start over again") {|v| options[:reset] = v }
  opts.on("-s", "--status", "Dump pet status") {|v| options[:status] = v}
  opts.on("-f FOOD", "--feed=FOOD", "Feed your pet bread without viewing") {|v| options[:feed] = v}
  opts.on("-c", "--clean", "Clean up any 'dirt' without viewing") {|v| options[:clean] = v}
  opts.on("-l", "--light", "Hit the lightswitch") {|v| options[:light] = v}
  opts.on("-p", "--path [PATH]", "path to your pet data (defaults to system config dir)") do |v|
    $tattydboverridepath = v
  end
end.parse!

pet = Petli::Pet.new
pet.display # force pet to update first
FOOD_OPTIONS = [:bread, :candy, :medicine]

if options[:reset]
  Tatty::DB.clear
  puts "Goodbye. I hope you love your next pet!"
elsif options[:status]
  puts Tatty::DB.dump
elsif options[:feed]
  if [:bread, :candy, :medicine].include?(options[:feed].to_sym)
    pet.feed!(food: options[:feed].to_sym)
  else
    puts "Unknown food #{options[:feed]}, only accepts #{FOOD_OPTIONS.join(", ")}"
    exit 1
  end
elsif options[:light]
  pet.light_switch
elsif options[:clean]
  pet.clean
else
  Tatty.run(Petli::Stages::Main, pet: pet)
end
